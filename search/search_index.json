{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started A2rchi is an AI Augmented Research Chat Intelligence, originally built for the subMIT project at the MIT physics department. At it's core, A2rchi is a RAG chat model which takes in a corpus of data and returns natural language output. However, there are a couple of things that make the A2rchi project unique and specialized toward research and education: Along with a native chat interface, A2rchi comes shipped with various other interfaces that enable it to do things such as: give suggestions for answers on a student help forum and help tech support teams answers emails and create tickets. A2rchi's fully customizable configuration allows users to tweak and adjust everything from prompts, to context lengths, to documents uploaded, etc. and is easy to deploy and modify. System Requirements A2rchi is containized and is deployed with a python-based CLI. Therefore, it requires: docker version 24+ (for containers) python 3.10.0+ (for CLI) Install A2rchi's CLI can be used to create and delete instances of an a2rchi deployment and provides the installation needed for A2rchi. To install the CLI, first clone the a2rchi repo: $ git clone https://github.com/mit-submit/A2rchi.git Then, activate a virtual/conda environment and from the root of the repository (i.e. where the pyproject.toml file is) by running: $ pip install . This will install A2rchi's dependencies as well as a local CLI tool. You should be able to see that it is installed using the which command (your output will be slightly different): $ which a2rchi /Users/default_user/A2rchi/venv/bin/a2rchi Secrets Secrets are values which are sensitive and therefore should not be directly included in code or configuration files. They typically include passwords, API keys, etc. To manage these secrets, we ask that you write them to a location on your file system in .txt files titled the name of the secrets. You will then give the location of the folder to the configuration file (see next section). You may also use multiple different folders/locations and supply them all to the configuration. The secrets you are required to have to start a2rchi are: - openai_api_key : the API key given by openAI - anthropic_api_key : the API key given by anthropic - hf_token : the API key to your huggingface account. - pg_password : some password you pick which encrypts the database. Note that you technically only need the API key for the models that you are using (by default openAI), so for the other ones you can just put in dummy variables. (Yes, we know it's not the cleanest way to do it...) Basic CLI Overview A2rchi's CORE launches its chat interface and data management interface. The CORE CLI has the following commands: a2rchi create --name <name> --a2rchi-config <path-to-config> a2rchi delete --name <name> The --name represents the name of your a2rchi deployment and by default the files for your deployment will be stored under ~/.a2rchi/a2rchi-{name} on your local machine (you don't need to do anything with them, this is just an FYI). The --a2rchi-config is a configuration file provided by the user which can override any of the templatable fields in a2rchi/templates/base-config.yaml . Required configuration fields There are a few required fields that must be included in every configuration. They are: name : The name of the configuration (NOTE: this is not neccessarily the name of the a2rchi deployment described above) global:TRAINED_ON : A quick couple words describing the data that you want A2rchi to specialize in. For example, \"introductory classical mechanics\" or \"the subMIT cluster at MIT.\" chains:input_lists : A list of file(s), each containing a list of websites seperated by new lines, used for A2rchi's starting context (more can be uploaded later). For example, configs/miscellanea.list contains information of the MIT proffessors who started the A2rchi project: # web pages of various people https://people.csail.mit.edu/kraska https://physics.mit.edu/faculty/christoph-paus chains:prompts:CONDENSING_PROMPT : A condensing prompt is a prompt used to condense a chat history and a follow up question into a stand alone question. This configuration line gives the path, relative to the root of the repo, of a file containing a condensing prompt. All condensing prompts must have the following tags in them, which will be filled with the appropriate information: {chat_history} and {question} . A very general prompt for condensing histories can be found at configs/prompts/condense.prompt , so for base installs it will not need to be modified. chains:prompts:SUMMARY_PROMPT : #TODO: I don't actually know what this does... For now just link it a blank file.... chains:prompts:MAIN_PROMPT: : A main prompt is a prompt used to qurery LLM with appropriate context and question. This configuration line gives the path, relative to the root of the repo, of a file containing a main prompt. All main prompts must have the following tags in them, which will be filled with the appropriate information: {question} and {context} . An example prompt specific to subMIT can be found here: configs/prompts/submit.prompt (it will not perform well for other applications where it is recommeneded to write your own prompt and change it in the config) location_of_secrets : A list of the absolute paths of folders containing secrets (passwords, API keys, etc.), discussed explicitly in the previous section. Below is an example of a bare minimum condifiguration file: # stored in file example_conf.yaml name: bare_minimum_configuration #REQUIRED global: TRAINED_ON: \"subMIT and the people who started A2rchi\" #REQUIRED chains: input_lists: #REQUIRED - config_old/submit.list - config_old/miscellanea.list prompts: CONDENSING_PROMPT: config_old/prompts/condense.prompt #REQUIRED MAIN_PROMPT: config_old/prompts/submit.prompt #REQUIRED SUMMARY_PROMPT: config_old/prompts/summary.prompt #REQUIRED location_of_secrets: #REQUIRED - ~/.secrets/a2rchi_base_secrets To view the full list of configuration variables, please refer to the users guide. Create new instance Now, to create an instance of an A2rchi deployment called my-a2rchi , simply create a file called example_conf.yaml with the contents like the ones above and run: $ a2rchi create --name my-a2rchi --a2rchi-config example_conf.yaml It will take up to (a few) seconds(s) for the command to finish (and possibly longer (minutes or dozens of minutes) the first time you run it b/c docker will have to build the container images from scratch), but you should ultimately see output similar to: [a2rchi]>> Creating docker volumes [a2rchi]>> Creating docker volume: a2rchi-my-a2rchi [a2rchi]>> Creating docker volume: a2rchi-pg-my-a2rchi [a2rchi]>> Creating docker volume: a2rchi-grafana-my-a2rchi [a2rchi]>> Preparing Grafana [a2rchi]>> Preparing Postgres [a2rchi]>> Preparing Compose [a2rchi]>> Starting docker compose ... ... A lot of logs from pulling and extracting images ... ... Network a2rchi-my-a2rchi_default Creating Network a2rchi-my-a2rchi_default Created Container postgres-my-a2rchi Creating Container chromadb-my-a2rchi Creating Container postgres-my-a2rchi Created Container chromadb-my-a2rchi Created Container grafana-my-a2rchi Creating Container chat-my-a2rchi Creating Container grafana-my-a2rchi Created Container chat-my-a2rchi Created Container postgres-my-a2rchi Starting Container chromadb-my-a2rchi Starting Container chromadb-my-a2rchi Started Container postgres-my-a2rchi Started Container chromadb-my-a2rchi Waiting Container postgres-my-a2rchi Waiting Container postgres-my-a2rchi Waiting Container postgres-my-a2rchi Healthy Container grafana-my-a2rchi Starting Container postgres-my-a2rchi Healthy Container grafana-my-a2rchi Started Container chromadb-my-a2rchi Healthy Container chat-my-a2rchi Starting Container chat-my-a2rchi Started You can verify that all your images are up and running properly by executing the following: $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7fd9015bf5df mdr223/a2rchi:chat-0.0.1 \"python -u a2rchi/bi\u2026\" 3 minutes ago Up 2 minutes 0.0.0.0:7861->7861/tcp chat-my-a2rchi d1f749f12416 mdr223/a2rchi:grafana-0.0.1 \"/run.sh\" 3 minutes ago Up 2 minutes 0.0.0.0:3000->3000/tcp grafana-my-a2rchi f1298d6efefc postgres:16 \"docker-entrypoint.s\u2026\" 3 minutes ago Up 2 minutes (healthy) 5432/tcp postgres-my-a2rchi efcb7be30a6e mdr223/a2rchi:chromadb-0.0.1 \"uvicorn chromadb.ap\u2026\" 3 minutes ago Up 2 minutes (healthy) 0.0.0.0:8000->8000/tcp chromadb-my-a2rchi To access the chat interface, visit its corresponding port ( 0.0.0.0:7861 in the above example ) Removing deployment Lastly, to tear down the deployment, simply run: $ a2rchi delete --name my-a2rchi Helpful Notes for Production Deployments You may wish to use the CLI in order to stage production deployments. This section covers some useful notes to keep in mind. Running multiple deployments on the same machine The CLI is built to allow multiple deployments to run on the same daemon. The docker networks between all the deployments are seperate, so there is very little risk of them accidentally communicating with one another. However, one thing to be careful of is the external ports. Suppose you're running two deployments and both of them are running the chat on port 8000. There is no way to view both deployments at the same time from the same port, so instead you should split to forwarding the deployments to other external ports. Generally, this can be done in the configuration: interfaces: chat_app: EXTERNAL_PORT: 1000 uploader_app: EXTERNAL_PORT: 1001 grafana: EXTERNAL_PORT: 1002 utils: data_manager: chromadb_external_port: 1050 Persisting data between deployments Docker volumes persist between deployments, so if you deploy an instance, and upload some further documents, you will not need to redo so every time you deploy. Of course, if you are editing any data, you should explicitly remove this infromation from the volume, or simply remove the volume itself with ``` docker volume rm","title":"Getting Started"},{"location":"#getting-started","text":"A2rchi is an AI Augmented Research Chat Intelligence, originally built for the subMIT project at the MIT physics department. At it's core, A2rchi is a RAG chat model which takes in a corpus of data and returns natural language output. However, there are a couple of things that make the A2rchi project unique and specialized toward research and education: Along with a native chat interface, A2rchi comes shipped with various other interfaces that enable it to do things such as: give suggestions for answers on a student help forum and help tech support teams answers emails and create tickets. A2rchi's fully customizable configuration allows users to tweak and adjust everything from prompts, to context lengths, to documents uploaded, etc. and is easy to deploy and modify.","title":"Getting Started"},{"location":"#system-requirements","text":"A2rchi is containized and is deployed with a python-based CLI. Therefore, it requires: docker version 24+ (for containers) python 3.10.0+ (for CLI)","title":"System Requirements"},{"location":"#install","text":"A2rchi's CLI can be used to create and delete instances of an a2rchi deployment and provides the installation needed for A2rchi. To install the CLI, first clone the a2rchi repo: $ git clone https://github.com/mit-submit/A2rchi.git Then, activate a virtual/conda environment and from the root of the repository (i.e. where the pyproject.toml file is) by running: $ pip install . This will install A2rchi's dependencies as well as a local CLI tool. You should be able to see that it is installed using the which command (your output will be slightly different): $ which a2rchi /Users/default_user/A2rchi/venv/bin/a2rchi","title":"Install"},{"location":"#secrets","text":"Secrets are values which are sensitive and therefore should not be directly included in code or configuration files. They typically include passwords, API keys, etc. To manage these secrets, we ask that you write them to a location on your file system in .txt files titled the name of the secrets. You will then give the location of the folder to the configuration file (see next section). You may also use multiple different folders/locations and supply them all to the configuration. The secrets you are required to have to start a2rchi are: - openai_api_key : the API key given by openAI - anthropic_api_key : the API key given by anthropic - hf_token : the API key to your huggingface account. - pg_password : some password you pick which encrypts the database. Note that you technically only need the API key for the models that you are using (by default openAI), so for the other ones you can just put in dummy variables. (Yes, we know it's not the cleanest way to do it...)","title":"Secrets"},{"location":"#basic-cli-overview","text":"A2rchi's CORE launches its chat interface and data management interface. The CORE CLI has the following commands: a2rchi create --name <name> --a2rchi-config <path-to-config> a2rchi delete --name <name> The --name represents the name of your a2rchi deployment and by default the files for your deployment will be stored under ~/.a2rchi/a2rchi-{name} on your local machine (you don't need to do anything with them, this is just an FYI). The --a2rchi-config is a configuration file provided by the user which can override any of the templatable fields in a2rchi/templates/base-config.yaml .","title":"Basic CLI Overview"},{"location":"#required-configuration-fields","text":"There are a few required fields that must be included in every configuration. They are: name : The name of the configuration (NOTE: this is not neccessarily the name of the a2rchi deployment described above) global:TRAINED_ON : A quick couple words describing the data that you want A2rchi to specialize in. For example, \"introductory classical mechanics\" or \"the subMIT cluster at MIT.\" chains:input_lists : A list of file(s), each containing a list of websites seperated by new lines, used for A2rchi's starting context (more can be uploaded later). For example, configs/miscellanea.list contains information of the MIT proffessors who started the A2rchi project: # web pages of various people https://people.csail.mit.edu/kraska https://physics.mit.edu/faculty/christoph-paus chains:prompts:CONDENSING_PROMPT : A condensing prompt is a prompt used to condense a chat history and a follow up question into a stand alone question. This configuration line gives the path, relative to the root of the repo, of a file containing a condensing prompt. All condensing prompts must have the following tags in them, which will be filled with the appropriate information: {chat_history} and {question} . A very general prompt for condensing histories can be found at configs/prompts/condense.prompt , so for base installs it will not need to be modified. chains:prompts:SUMMARY_PROMPT : #TODO: I don't actually know what this does... For now just link it a blank file.... chains:prompts:MAIN_PROMPT: : A main prompt is a prompt used to qurery LLM with appropriate context and question. This configuration line gives the path, relative to the root of the repo, of a file containing a main prompt. All main prompts must have the following tags in them, which will be filled with the appropriate information: {question} and {context} . An example prompt specific to subMIT can be found here: configs/prompts/submit.prompt (it will not perform well for other applications where it is recommeneded to write your own prompt and change it in the config) location_of_secrets : A list of the absolute paths of folders containing secrets (passwords, API keys, etc.), discussed explicitly in the previous section. Below is an example of a bare minimum condifiguration file: # stored in file example_conf.yaml name: bare_minimum_configuration #REQUIRED global: TRAINED_ON: \"subMIT and the people who started A2rchi\" #REQUIRED chains: input_lists: #REQUIRED - config_old/submit.list - config_old/miscellanea.list prompts: CONDENSING_PROMPT: config_old/prompts/condense.prompt #REQUIRED MAIN_PROMPT: config_old/prompts/submit.prompt #REQUIRED SUMMARY_PROMPT: config_old/prompts/summary.prompt #REQUIRED location_of_secrets: #REQUIRED - ~/.secrets/a2rchi_base_secrets To view the full list of configuration variables, please refer to the users guide.","title":"Required configuration fields"},{"location":"#create-new-instance","text":"Now, to create an instance of an A2rchi deployment called my-a2rchi , simply create a file called example_conf.yaml with the contents like the ones above and run: $ a2rchi create --name my-a2rchi --a2rchi-config example_conf.yaml It will take up to (a few) seconds(s) for the command to finish (and possibly longer (minutes or dozens of minutes) the first time you run it b/c docker will have to build the container images from scratch), but you should ultimately see output similar to: [a2rchi]>> Creating docker volumes [a2rchi]>> Creating docker volume: a2rchi-my-a2rchi [a2rchi]>> Creating docker volume: a2rchi-pg-my-a2rchi [a2rchi]>> Creating docker volume: a2rchi-grafana-my-a2rchi [a2rchi]>> Preparing Grafana [a2rchi]>> Preparing Postgres [a2rchi]>> Preparing Compose [a2rchi]>> Starting docker compose ... ... A lot of logs from pulling and extracting images ... ... Network a2rchi-my-a2rchi_default Creating Network a2rchi-my-a2rchi_default Created Container postgres-my-a2rchi Creating Container chromadb-my-a2rchi Creating Container postgres-my-a2rchi Created Container chromadb-my-a2rchi Created Container grafana-my-a2rchi Creating Container chat-my-a2rchi Creating Container grafana-my-a2rchi Created Container chat-my-a2rchi Created Container postgres-my-a2rchi Starting Container chromadb-my-a2rchi Starting Container chromadb-my-a2rchi Started Container postgres-my-a2rchi Started Container chromadb-my-a2rchi Waiting Container postgres-my-a2rchi Waiting Container postgres-my-a2rchi Waiting Container postgres-my-a2rchi Healthy Container grafana-my-a2rchi Starting Container postgres-my-a2rchi Healthy Container grafana-my-a2rchi Started Container chromadb-my-a2rchi Healthy Container chat-my-a2rchi Starting Container chat-my-a2rchi Started You can verify that all your images are up and running properly by executing the following: $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7fd9015bf5df mdr223/a2rchi:chat-0.0.1 \"python -u a2rchi/bi\u2026\" 3 minutes ago Up 2 minutes 0.0.0.0:7861->7861/tcp chat-my-a2rchi d1f749f12416 mdr223/a2rchi:grafana-0.0.1 \"/run.sh\" 3 minutes ago Up 2 minutes 0.0.0.0:3000->3000/tcp grafana-my-a2rchi f1298d6efefc postgres:16 \"docker-entrypoint.s\u2026\" 3 minutes ago Up 2 minutes (healthy) 5432/tcp postgres-my-a2rchi efcb7be30a6e mdr223/a2rchi:chromadb-0.0.1 \"uvicorn chromadb.ap\u2026\" 3 minutes ago Up 2 minutes (healthy) 0.0.0.0:8000->8000/tcp chromadb-my-a2rchi To access the chat interface, visit its corresponding port ( 0.0.0.0:7861 in the above example )","title":"Create new instance"},{"location":"#removing-deployment","text":"Lastly, to tear down the deployment, simply run: $ a2rchi delete --name my-a2rchi","title":"Removing deployment"},{"location":"#helpful-notes-for-production-deployments","text":"You may wish to use the CLI in order to stage production deployments. This section covers some useful notes to keep in mind.","title":"Helpful Notes for Production Deployments"},{"location":"#running-multiple-deployments-on-the-same-machine","text":"The CLI is built to allow multiple deployments to run on the same daemon. The docker networks between all the deployments are seperate, so there is very little risk of them accidentally communicating with one another. However, one thing to be careful of is the external ports. Suppose you're running two deployments and both of them are running the chat on port 8000. There is no way to view both deployments at the same time from the same port, so instead you should split to forwarding the deployments to other external ports. Generally, this can be done in the configuration: interfaces: chat_app: EXTERNAL_PORT: 1000 uploader_app: EXTERNAL_PORT: 1001 grafana: EXTERNAL_PORT: 1002 utils: data_manager: chromadb_external_port: 1050","title":"Running multiple deployments on the same machine"},{"location":"#persisting-data-between-deployments","text":"Docker volumes persist between deployments, so if you deploy an instance, and upload some further documents, you will not need to redo so every time you deploy. Of course, if you are editing any data, you should explicitly remove this infromation from the volume, or simply remove the volume itself with ``` docker volume rm","title":"Persisting data between deployments"},{"location":"about/","text":"A2rchi (AI Augmented Research Chat Intelligence) is an open source, end-to-end framework to quickly build an AI support agent for classes and research resources developed jointly by Prof. Paus, MIT Physics and Prof. Kraska, MIT EECS and their students. It has already been successfully deployed for SubMIT, the private cloud at MIT\u2019s physic department, and for the 8.01 and 8.511 courses. Currently, A2rchi is integrated with Redmine, a widely used open-source project management tool (including a ticketing system), and Piazza, a popular discussion forum for courses that MIT uses; apart from information contained in Piazza and Redmine, A2rchi consumes specialized information from documents that au- thorized users can upload through a A2rchi\u2019s web uploader. A2rchi can be used as a tool for TAs, lecturers, and support staff to prepare answers or directly by students to receive help without human involvement. To provide high-quality answers A2rchi uses previous Piazza posts, tickets, documenta- tion, and other class/system-specific documents. For example, in Piazza A2rchi is a plug-in that can help to prepare an answer based on a Piazza post. The TA/lecturer can then approve or modify the answer before sending it out, or A2rchi can send out the reply directly. Moreover, A2rchi continuously learns from any potential modification or from other Piazza posts, which are answers by TAs. So the answers keep improving over time, and are highly class-specific. The principle for research resource support, e.g., SubMIT, is similar except that users send email to the help desk which are automatically answered and converted to support tickets in Redmine using A2rchi plugins. The technical support staff then has to review the answers and trigger the reply to the user. In addition, A2rchi can also be deployed to be directly used by students as a chatbot to seek help at any time and without hu- man involvement. Its chat agent uses the same knowledge base as the plugin for TAs/lecturers/staff members. A2rchi is not the first GenAI support agent, but what sets A2rchi apart is that it is fully open-source, works with different foundational models, and most importantly is interacting with various platforms like Piazza, Red- mine, Slack, Discourse, and Mattermost. As such, it can be entirely locally deployed and restricted to locally hosted open-source foundational models; a requirement whenever potential sensi- tive (student, user) data is involved. Under the hood, A2rchi is a highly configurable Retrieval Augmented Generation (RAG) system specifically designed for education and support for science resources. Given the success of A2rchi so far we are now expanding its scope to more MIT classes, CERN, Harvard, and other internal use cases (e.g., support for CSAIL\u2019s support staff).","title":"About"},{"location":"developers/","text":"Developers Guide Below is all the information which developers may need in order to get started contributing to the A2rchi project. Editing Documentation. Editing documentation requires you to install the mkdocs python packge: pip install mkdocs To edit documentation, simply make changes to the .md and .yml files in the ./docs folder. To view your changes without pushing them, cd into the ./docs folder and then run mkdocs serve . Add the -a IP:HOST argument (default is localhost:8000) to specify where to host the docs so you can easily view your changes on the web. To publish your changes, run mkdocs gh-deploy . Please make sure to also open a PR to merge the documentation changes into main. Note, please do NOT edit files in the gh-pages branch by hand, again, make a PR to main from a separate branch, and then you can deploy from main with the new changes.","title":"Developer's Guide"},{"location":"developers/#developers-guide","text":"Below is all the information which developers may need in order to get started contributing to the A2rchi project.","title":"Developers Guide"},{"location":"developers/#editing-documentation","text":"Editing documentation requires you to install the mkdocs python packge: pip install mkdocs To edit documentation, simply make changes to the .md and .yml files in the ./docs folder. To view your changes without pushing them, cd into the ./docs folder and then run mkdocs serve . Add the -a IP:HOST argument (default is localhost:8000) to specify where to host the docs so you can easily view your changes on the web. To publish your changes, run mkdocs gh-deploy . Please make sure to also open a PR to merge the documentation changes into main. Note, please do NOT edit files in the gh-pages branch by hand, again, make a PR to main from a separate branch, and then you can deploy from main with the new changes.","title":"Editing Documentation."},{"location":"users_guide/","text":"Users Guide A2rchi is built with several interfaces which collaborate with a CORE in order to create a customized RAG system. If you haven't already, read out Getting Started page to install, create, and run the CORE. The user's guide is broken up into detailing the various interfaces and the secrets/configurations needed for those interfaces. To include an interface, simply add it's tag at the end of the create CLI command. For example, to include grafana run $ a2rchi create --name my-a2rchi --a2rchi-config example_conf.yaml --grafana True CORE Interface TODO: add description of interface here Secrets Configuration Adding Documents and the Uploader Interface Adding Documents There are two main ways to add documents to A2rchi's vector database. They are \u00b7 - Adding lists of online pdf sources to the configuration to be uploaded at start up - Manually adding files while the service is running via the uploader. Both methods are outlined below Document Lists Before starting the a2rchi service, one can create a document list, which is a .list file containing links that point to either html , txt , or pdf files. .list files are also able to support comments, \u21aausing \"#\". They are also generally stored in the config folder of the repository. For example, the below may be a list # Documents for the 6.5830 class https://dsg.csail.mit.edu/6.5830/index.php https://db.csail.mit.edu/madden/ https://people.csail.mit.edu/kraska/ https://dsg.csail.mit.edu/6.5830/syllabus.php https://dsg.csail.mit.edu/6.5830/faq.php https://dsg.csail.mit.edu/6.5830/lectures/lec1-notes.pdf https://dsg.csail.mit.edu/6.5830/lectures/lec2-notes.pdf https://dsg.csail.mit.edu/6.5830/lectures/lec3-notes.pdf Once you have created and saved the list in the repository, simply add it to the configuration of the deployment you would like to run under chains/input-lists such as chains: input_lists: - empty.list - submit.list - miscellanea.list When you restart the service, all the documents will be uploaded to the vector store. Note, this may take a few minutes. Manual Uploader In order to upload papers while a2rchi is running via an easily accessible GUI, use the data manager built into the system. The manager is run as an additional docker service by adding the following argument to the CLI command: --service-uploader The exact port may vary based on configuration (default is 5001 ). A simple docker ps -a command run on the server will inform which port it's being run on. In order to access the manager, one must first make an account. To do this, first get the ID or name of the uploader container using docker ps -a . Then, acces the container using docker exec -it <CONTAINER-ID> bash so you can run python bin/service_create_account.py from the /root/A2rchi/a2rchi directory.\u00b7 This script will guide you through creating an account. Note that we do not garuntee the security of this account, so never upload critical passwords to create it.\u00b7 Once you have created an account, visit the outgoing port of the data manager docker service and then log in. The GUI will then allow you to upload documents while a2rchi is still running. Note that it may take a \u21aafew minutes for all the documents to upload. Piazza Interface TODO: add description of interface here Secrets Configuration Cleo/Mailbox Interface TODO: add description of interface here Secrets Configuration Grafana Interface TODO: add description of interface here Secrets Configuration","title":"User's Guide"},{"location":"users_guide/#users-guide","text":"A2rchi is built with several interfaces which collaborate with a CORE in order to create a customized RAG system. If you haven't already, read out Getting Started page to install, create, and run the CORE. The user's guide is broken up into detailing the various interfaces and the secrets/configurations needed for those interfaces. To include an interface, simply add it's tag at the end of the create CLI command. For example, to include grafana run $ a2rchi create --name my-a2rchi --a2rchi-config example_conf.yaml --grafana True","title":"Users Guide"},{"location":"users_guide/#core-interface","text":"TODO: add description of interface here","title":"CORE Interface"},{"location":"users_guide/#secrets","text":"","title":"Secrets"},{"location":"users_guide/#configuration","text":"","title":"Configuration"},{"location":"users_guide/#adding-documents-and-the-uploader-interface","text":"","title":"Adding Documents and the Uploader Interface"},{"location":"users_guide/#adding-documents","text":"There are two main ways to add documents to A2rchi's vector database. They are \u00b7 - Adding lists of online pdf sources to the configuration to be uploaded at start up - Manually adding files while the service is running via the uploader. Both methods are outlined below","title":"Adding Documents"},{"location":"users_guide/#document-lists","text":"Before starting the a2rchi service, one can create a document list, which is a .list file containing links that point to either html , txt , or pdf files. .list files are also able to support comments, \u21aausing \"#\". They are also generally stored in the config folder of the repository. For example, the below may be a list # Documents for the 6.5830 class https://dsg.csail.mit.edu/6.5830/index.php https://db.csail.mit.edu/madden/ https://people.csail.mit.edu/kraska/ https://dsg.csail.mit.edu/6.5830/syllabus.php https://dsg.csail.mit.edu/6.5830/faq.php https://dsg.csail.mit.edu/6.5830/lectures/lec1-notes.pdf https://dsg.csail.mit.edu/6.5830/lectures/lec2-notes.pdf https://dsg.csail.mit.edu/6.5830/lectures/lec3-notes.pdf Once you have created and saved the list in the repository, simply add it to the configuration of the deployment you would like to run under chains/input-lists such as chains: input_lists: - empty.list - submit.list - miscellanea.list When you restart the service, all the documents will be uploaded to the vector store. Note, this may take a few minutes.","title":"Document Lists"},{"location":"users_guide/#manual-uploader","text":"In order to upload papers while a2rchi is running via an easily accessible GUI, use the data manager built into the system. The manager is run as an additional docker service by adding the following argument to the CLI command: --service-uploader The exact port may vary based on configuration (default is 5001 ). A simple docker ps -a command run on the server will inform which port it's being run on. In order to access the manager, one must first make an account. To do this, first get the ID or name of the uploader container using docker ps -a . Then, acces the container using docker exec -it <CONTAINER-ID> bash so you can run python bin/service_create_account.py from the /root/A2rchi/a2rchi directory.\u00b7 This script will guide you through creating an account. Note that we do not garuntee the security of this account, so never upload critical passwords to create it.\u00b7 Once you have created an account, visit the outgoing port of the data manager docker service and then log in. The GUI will then allow you to upload documents while a2rchi is still running. Note that it may take a \u21aafew minutes for all the documents to upload.","title":"Manual Uploader"},{"location":"users_guide/#piazza-interface","text":"TODO: add description of interface here","title":"Piazza Interface"},{"location":"users_guide/#secrets_1","text":"","title":"Secrets"},{"location":"users_guide/#configuration_1","text":"","title":"Configuration"},{"location":"users_guide/#cleomailbox-interface","text":"TODO: add description of interface here","title":"Cleo/Mailbox Interface"},{"location":"users_guide/#secrets_2","text":"","title":"Secrets"},{"location":"users_guide/#configuration_2","text":"","title":"Configuration"},{"location":"users_guide/#grafana-interface","text":"TODO: add description of interface here","title":"Grafana Interface"},{"location":"users_guide/#secrets_3","text":"","title":"Secrets"},{"location":"users_guide/#configuration_3","text":"","title":"Configuration"}]}