"""Dataclass to standardize the output of the classic pipelines and the pipelines / agents."""

from dataclasses import dataclass, field, asdict
from typing import Any, Dict, List, Iterator
from langchain_core.documents import Document


@dataclass
class PipelineOutput:
    """Standard container for classic pipelines and agent responses."""

    answer: str
    """The final answer content generated by the pipeline or agent."""

    source_documents: List[Document] = field(default_factory=list)
    """The source documents used to generate the answer."""

    intermediate_steps: List[str] = field(default_factory=list)
    """The intermediate steps taken by the pipeline or agent to arrive at the final answer."""

    metadata: Dict[str, Any] = field(default_factory=dict)
    """Additional metadata or structured payloads returned by the pipeline."""

    final: bool = True
    """Indicates whether this object represents the terminal payload in a stream of outputs."""

    def __getitem__(self, key: str) -> Any:
        return self.to_dict()[key]

    def __iter__(self) -> Iterator[str]:
        return iter(self.to_dict())

    def __len__(self) -> int:
        return len(self.to_dict())
    
    def get(self, key: str, default: Any = None) -> Any:
        return self.to_dict().get(key, default)

    def to_dict(self) -> Dict[str, Any]:
        # asdict handles nested dataclasses too
        return asdict(self)